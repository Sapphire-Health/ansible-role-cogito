# These recommended DB settings are correct by default; we don't enforce them with ansible:
#     collation is SQL_Latin1_General_CP1_CI_AS, Default Cursor is set to GLOBAL, Confirm the Page Verify setting is set to CHECKSUM
#
# needs - caboodle changes:
# If you are creating your staging database, set Auto Update Statistics to True and Auto Update Statistics Asynchronously to False. 
# If you are creating your reporting database, set both Auto Update Statistics and Auto Update Statistics Asynchronously to True.
---
- name: Add tags to all tasks
  tags:
    - sql
    - caboodle
    - clarity
    - database
  block:
    - name: Configure SQL Databases
      when: sql_dbs is defined
      block:
        - name: Create SQL Database Files with T-SQL
          ansible.windows.win_dsc:
            resource_name: SqlScriptQuery
            Id: "ConfigureDatabaseFiles"
            InstanceName: "{{ dsc_instancename }}"
            Variable: "NAME={{ db.name }}, SIZE={{ db.db_size }}, MAXSIZE={{ db.db_max_size }}, FILEGROWTH={{ db.db_growth }}, DATAPATH={{ db.data_path }},LOGSIZE={{ db.log_size }}, LOGMAXSIZE={{ db.log_max_size }}, LOGFILEGROWTH={{ db.log_growth }}, LOGFILEPATH={{ db.log_path }}"
            Encrypt: Optional
            SetQuery: "{{ lookup('ansible.builtin.template', 'dbcreationscript.j2') }}"
            GetQuery: |
              SELECT NULL;
            TestQuery: |
              USE [msdb]
              GO
              IF EXISTS (
                SELECT 1
                FROM sys.databases
                WHERE name = '$(NAME)'
              )
                PRINT 'Found $(NAME) database'
              ELSE
                RAISERROR ('Did not find $(NAME) role', 16, 1)
              GO
          loop: "{{ sql_dbs }}"
          loop_control:
            loop_var: db

    - name: Configure Epic best practices for SQL Databases
      when: clarity_report_databases is defined
      block:
      - name: Configure SQL Database Files with T-SQL
        ansible.windows.win_dsc:
          resource_name: SqlScriptQuery
          Id: "TuneDatabaseFiles"
          InstanceName: "{{ dsc_instancename }}"
          Variable: "NAME={{ db.name }}, RECOVERYMODE={{ db.recovery_model }}"
          Encrypt: Optional
          SetQuery: |
            USE [master]
            GO
            ALTER DATABASE [$(NAME)] MODIFY FILEGROUP [primary] AUTOGROW_ALL_FILES
            ALTER DATABASE [$(NAME)] SET MIXED_PAGE_ALLOCATION OFF;
            ALTER DATABASE [$(NAME)] SET ACCELERATED_DATABASE_RECOVERY = ON
            (PERSISTENT_VERSION_STORE_FILEGROUP = [PRIMARY]);
            ALTER DATABASE $(NAME) SET QUERY_STORE = ON;
            ALTER DATABASE $(NAME) SET QUERY_STORE (MAX_STORAGE_SIZE_MB = 4096, QUERY_CAPTURE_MODE = AUTO);
            ALTER DATABASE [$(NAME)] SET COMPATIBILITY_LEVEL = 160;
            ALTER DATABASE [$(NAME)] SET ANSI_NULL_DEFAULT OFF;
            ALTER DATABASE [$(NAME)] SET ANSI_NULLS OFF;
            ALTER DATABASE [$(NAME)] SET ANSI_PADDING OFF;
            ALTER DATABASE [$(NAME)] SET ANSI_WARNINGS OFF;
            ALTER DATABASE [$(NAME)] SET ARITHABORT OFF;
            ALTER DATABASE [$(NAME)] SET AUTO_CLOSE OFF;
            ALTER DATABASE [$(NAME)] SET AUTO_SHRINK OFF;
            ALTER DATABASE [$(NAME)] SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF);
            ALTER DATABASE [$(NAME)] SET AUTO_UPDATE_STATISTICS ON;
            ALTER DATABASE [$(NAME)] SET CURSOR_CLOSE_ON_COMMIT OFF;
            ALTER DATABASE [$(NAME)] SET CURSOR_DEFAULT  GLOBAL;
            ALTER DATABASE [$(NAME)] SET CONCAT_NULL_YIELDS_NULL OFF;
            ALTER DATABASE [$(NAME)] SET NUMERIC_ROUNDABORT OFF;
            ALTER DATABASE [$(NAME)] SET QUOTED_IDENTIFIER OFF;
            ALTER DATABASE [$(NAME)] SET RECURSIVE_TRIGGERS OFF;
            ALTER DATABASE [$(NAME)] SET DISABLE_BROKER;
            ALTER DATABASE [$(NAME)] SET AUTO_UPDATE_STATISTICS_ASYNC OFF;
            ALTER DATABASE [$(NAME)] SET DATE_CORRELATION_OPTIMIZATION OFF;
            ALTER DATABASE [$(NAME)] SET PARAMETERIZATION SIMPLE;
            ALTER DATABASE [$(NAME)] SET READ_COMMITTED_SNAPSHOT OFF;
            ALTER DATABASE [$(NAME)] SET READ_WRITE;
            ALTER DATABASE [$(NAME)] SET RECOVERY $(RECOVERYMODE);
            ALTER DATABASE [$(NAME)] SET MULTI_USER;
            ALTER DATABASE [$(NAME)] SET PAGE_VERIFY CHECKSUM;
            ALTER DATABASE [$(NAME)] SET TARGET_RECOVERY_TIME = 60 SECONDS;
            ALTER DATABASE [$(NAME)] SET DELAYED_DURABILITY = DISABLED;
          GetQuery: |
            SELECT NULL;
          TestQuery: |
            USE [msdb]
            GO
            IF EXISTS (
              SELECT 1
              FROM sys.databases
              WHERE name = '$(NAME)'
            )
              PRINT 'Did not find $(NAME) role'
            ELSE
              RAISERROR ('Found $(NAME) database', 16, 1)
            GO
        loop: "{{ sql_dbs }}"
        loop_control:
          loop_var: db
